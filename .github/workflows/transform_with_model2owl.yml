name: transform UML model
on:
  push:
    branches:
      - "**"
    paths:
      - "implementation/demo_ontology/xmi_conceptual_model/demo_ontology_CM.xml"
      - "implementation/demo_ontology_module/xmi_conceptual_model/demo_ontology_module_CM.xml"
jobs:
  report_and_glossary:
    runs-on: ubuntu-latest
    env:
      OUTPUT_GLOSSARY_PATH: glossary/
    steps:
      - uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: get model2owl
        run: |
          git clone --branch feature/M2O3-104 https://github.com/meaningfy-ws/model2owl.git 
          pwd

      - name: get-saxon
        run: pwd && cd model2owl && make get-saxon


      - name: generate convention report and glossary
        run: |
          AVAILABLE_IMPLEMENTATIONS=(demo_ontology demo_ontology_module)
          for implementation in "${AVAILABLE_IMPLEMENTATIONS[@]}"
          do
            echo "-------------------${implementation}---------------------------------"
            sed -i "s/test\/ePO-default-config/..\/implementation\/${implementation}\/model2owl-config/g" model2owl/config-proxy.xsl
            cat model2owl/config-proxy.xsl


            CM_FILE_NAME=$(echo "${implementation}_CM.xml")
            CM_FILE_PATH=$(echo "implementation/$implementation/xmi_conceptual_model/${CM_FILE_NAME}")
            NS_XML_FILE_PATH="../implementation/${implementation}/model2owl-config/namespaces.xml"

            OUTPUT_CONVENTION_REPORT_PATH=$(echo "implementation/$implementation/conventions_report/")
            OUTPUT_GLOSSARY_FILE_NAME=$(echo "${implementation}_glossary.html")
            ls -la implementation/$implementation/xmi_conceptual_model/
            echo "CM_FILE_PATH is $CM_FILE_PATH"
            echo "NS_XML_FILE_PATH is $NS_XML_FILE_PATH"
            echo "OUTPUT_REPORT_PATH is $OUTPUT_CONVENTION_REPORT_PATH"
            echo "OUTPUT_GLOSSARY_FILE_NAME is $OUTPUT_GLOSSARY_FILE_NAME"

            mkdir -p $OUTPUT_CONVENTION_REPORT_PATH
            rm -f $OUTPUT_CONVENTION_REPORT_PATH*.html || true
            ls -la
            cd model2owl
            ls -la
            make generate-convention-report \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_CONVENTION_REPORT_PATH=../$OUTPUT_CONVENTION_REPORT_PATH \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            make generate-glossary \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_GLOSSARY_PATH=../$OUTPUT_GLOSSARY_PATH \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}

            sed -i "s/..\/implementation\/${implementation}\/model2owl-config/test\/ePO-default-config/g" config-proxy.xsl
            cd ..
          done
        shell: bash

      - name: merge implementations xmi files into one
        run: |
          AVAILABLE_IMPLEMENTATIONS=(demo_ontology demo_ontology_module)
          cd model2owl
          mkdir -p merge-xmis
          for implementation in "${AVAILABLE_IMPLEMENTATIONS[@]}"
          do
            cp ../implementation/$implementation/xmi_conceptual_model/*_CM.xml merge-xmis
          done
          ls merge-xmis

          make merge-xmi FIRST_XMI_TO_BE_MERGED_FILE_PATH=merge-xmis/demo_ontology_CM.xml

          echo "merged XMI file"
          ls output/combined-xmi
        shell: bash

      - name: generate combined glossary from the merged xmi
        run: |
          # get a namespaces file from an arbitrary module
          NS_XML_FILE_PATH=$(realpath $(find . -type f -path './implementation/*/model2owl-config/namespaces.xml' | head -1))
          echo "NS_XML_FILE_PATH is $NS_XML_FILE_PATH"
          cd model2owl
          make generate-glossary \
            XMI_INPUT_FILE_PATH=output/combined-xmi/ontologies-combined.xmi \
            OUTPUT_GLOSSARY_PATH=../$OUTPUT_GLOSSARY_PATH \
            NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}

      - name: remove unnecessary files
        run: |
          sudo rm -rf model2owl
        shell: bash

      - name: commit files
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          git pull
          git status

          git add .
          if [ -z "$(git status --porcelain)" ]; then
          echo "::set-output name=push::false"
          else
          git commit -m "Adding convention report and glossary files"
          echo "::set-output name=push::true"
          fi
        shell: bash

      - name: Push changes
        if: steps.commit.outputs.push == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
  transform:
    needs: report_and_glossary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: get model2owl
        run: |
          git clone --branch feature/M2O3-104 https://github.com/meaningfy-ws/model2owl.git 
          pwd

      - name: get-saxon
        run: pwd && cd model2owl && make get-saxon

      - name: get-rdflib
        run: cd model2owl && make create-virtual-env && make get-rdflib

      - name: transform step
        run: |
          AVAILABLE_IMPLEMENTATIONS=(demo_ontology demo_ontology_module)
          for implementation in "${AVAILABLE_IMPLEMENTATIONS[@]}"
          do
            echo "-------------------${implementation} transform---------------------------------"
            sed -i "s/test\/ePO-default-config/..\/implementation\/${implementation}\/model2owl-config/g" model2owl/config-proxy.xsl
            cat model2owl/config-proxy.xsl


            CM_FILE_NAME=$(echo "${implementation}_CM.xml")
            CM_FILE_PATH=$(echo "implementation/$implementation/xmi_conceptual_model/${CM_FILE_NAME}")
            NS_XML_FILE_PATH="../implementation/${implementation}/model2owl-config/namespaces.xml"
            OUTPUT_PATH_OWL=$(echo "implementation/$implementation/owl_ontology/")
            OUTPUT_PATH_SHACL=$(echo "implementation/$implementation/shacl_shapes/")

            ls -la implementation/$implementation/xmi_conceptual_model/
            echo "CM_FILE_PATH is $CM_FILE_PATH"
            echo "NS_XML_FILE_PATH is $NS_XML_FILE_PATH"
            echo "OUTPUT_PATH_OWL is $OUTPUT_PATH_OWL"
            echo "OUTPUT_PATH_SHACL is $OUTPUT_PATH_SHACL"


            cd model2owl
            ls -la
            echo "+++++++++++++++++transform to rdf++++++++++++++++++++++++++++"
            make owl-core \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_FOLDER_PATH=../$OUTPUT_PATH_OWL \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            make owl-restrictions \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_FOLDER_PATH=../$OUTPUT_PATH_OWL \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            make shacl \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_FOLDER_PATH=../$OUTPUT_PATH_SHACL \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}

            echo "+++++++++++++++++transform to turtle++++++++++++++++++++++++++++"
            echo $(ls ../${OUTPUT_PATH_OWL}*.rdf)
            make convert-rdf-to-turtle \
              ONTOLOGY_FOLDER_PATH=../$OUTPUT_PATH_OWL \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}

            echo $(ls ../${OUTPUT_PATH_SHACL}*.rdf)
            make convert-rdf-to-turtle \
              ONTOLOGY_FOLDER_PATH=../$OUTPUT_PATH_SHACL \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            echo "-------------------end transform---------------------------------"

            sed -i "s/..\/implementation\/${implementation}\/model2owl-config/test\/ePO-default-config/g" config-proxy.xsl
            cd ..
          done
        shell: bash

      - name: remove unnecessary files
        run: |
          sudo rm -rf model2owl
        shell: bash

      - name: commit files
        id: commit
        run: |
               git config --local user.email "action@github.com"
               git config --local user.name "github-actions"
               git pull
               git status

               git add .
               if [ -z "$(git status --porcelain)" ]; then
               echo "::set-output name=push::false"
               else
               git commit -m "Adding transformation files"
               echo "::set-output name=push::true"
               fi
        shell: bash

      - name: Push changes
        if: steps.commit.outputs.push == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
  
  generate_jsonld_context:
    needs: transform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: get model2owl
        run: |
          git clone --branch feature/M2O3-104 https://github.com/meaningfy-ws/model2owl.git 
          pwd

      - name: get-saxon
        run: pwd && cd model2owl && make get-saxon

      - name: get-rdflib
        run: cd model2owl && make create-virtual-env && make get-rdflib

      - name: generate JSON-LD context
        run: |
          AVAILABLE_IMPLEMENTATIONS=(demo_ontology demo_ontology_module)
          for implementation in "${AVAILABLE_IMPLEMENTATIONS[@]}"
          do
            echo "-------------------${implementation} JSON-LD context generation---------------------------------"
            sed -i "s/test\/ePO-default-config/..\/implementation\/${implementation}\/model2owl-config/g" model2owl/config-proxy.xsl
            cat model2owl/config-proxy.xsl

            CM_FILE_NAME=$(echo "${implementation}_CM.xml")
            CM_FILE_PATH=$(echo "implementation/$implementation/xmi_conceptual_model/${CM_FILE_NAME}")
            NS_XML_FILE_PATH="../implementation/${implementation}/model2owl-config/namespaces.xml"
            OUTPUT_PATH_JSONLD=$(echo "implementation/$implementation/jsonld_context/")

            ls -la implementation/$implementation/xmi_conceptual_model/
            echo "CM_FILE_PATH is $CM_FILE_PATH"
            echo "NS_XML_FILE_PATH is $NS_XML_FILE_PATH"
            echo "OUTPUT_PATH_JSONLD is $OUTPUT_PATH_JSONLD"

            mkdir -p $OUTPUT_PATH_JSONLD
            cd model2owl
            ls -la
            echo "+++++++++++++++++prepare namespaces for JSON-LD context++++++++++++++++++++++++++++"
            # Generate enriched namespaces first (required for JSON-LD context generation)
            make gen-enriched-ns-file \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            echo "+++++++++++++++++generate JSON-LD context++++++++++++++++++++++++++++"
            make generate-jsonld-context \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_FOLDER_PATH=../$OUTPUT_PATH_JSONLD \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            echo "-------------------end JSON-LD context generation---------------------------------"

            sed -i "s/..\/implementation\/${implementation}\/model2owl-config/test\/ePO-default-config/g" config-proxy.xsl
            cd ..
          done
        shell: bash

      - name: remove unnecessary files
        run: |
          sudo rm -rf model2owl
        shell: bash

      - name: commit files
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          git pull
          git status

          git add .
          if [ -z "$(git status --porcelain)" ]; then
          echo "::set-output name=push::false"
          else
          git commit -m "Adding JSON-LD context files"
          echo "::set-output name=push::true"
          fi
        shell: bash

      - name: Push changes
        if: steps.commit.outputs.push == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
  
  generate_respec:
    needs: generate_jsonld_context
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: get model2owl
        run: |
          git clone --branch feature/M2O3-104 https://github.com/meaningfy-ws/model2owl.git 
          pwd

      - name: get-saxon
        run: pwd && cd model2owl && make get-saxon

      - name: get-rdflib
        run: cd model2owl && make create-virtual-env && make get-rdflib

      - name: get-jinja
        run: cd model2owl && make get-jinja

      - name: get-jq
        run: cd model2owl && make get-jq

      - name: generate ReSpec documentation
        run: |
          AVAILABLE_IMPLEMENTATIONS=(demo_ontology demo_ontology_module)
          for implementation in "${AVAILABLE_IMPLEMENTATIONS[@]}"
          do
            echo "-------------------${implementation} ReSpec generation---------------------------------"
            sed -i "s/test\/ePO-default-config/..\/implementation\/${implementation}\/model2owl-config/g" model2owl/config-proxy.xsl
            cat model2owl/config-proxy.xsl

            CM_FILE_NAME=$(echo "${implementation}_CM.xml")
            CM_FILE_PATH=$(echo "implementation/$implementation/xmi_conceptual_model/${CM_FILE_NAME}")
            NS_XML_FILE_PATH="../implementation/${implementation}/model2owl-config/namespaces.xml"
            OUTPUT_PATH_RESPEC=$(echo "implementation/$implementation/respec/")
            
            # Paths to existing artifacts from previous jobs
            OWL_CORE_PATH=$(echo "implementation/$implementation/owl_ontology/${implementation}_CM.rdf")
            OWL_RESTR_PATH=$(echo "implementation/$implementation/owl_ontology/${implementation}_CM_restrictions.rdf")
            SHACL_SHAPES_PATH=$(echo "implementation/$implementation/shacl_shapes/${implementation}_CM_shapes.rdf")
            JSONLD_CONTEXT_PATH=$(echo "implementation/$implementation/jsonld_context/${implementation}_CM_context.jsonld")
            RESPEC_ASSETS_PATH="../implementation/${implementation}/respec-resources/assets"
            METADATA_JSON_PATH="../implementation/${implementation}/model2owl-config/metadata.json"

            ls -la implementation/$implementation/xmi_conceptual_model/
            echo "CM_FILE_PATH is $CM_FILE_PATH"
            echo "NS_XML_FILE_PATH is $NS_XML_FILE_PATH"
            echo "OUTPUT_PATH_RESPEC is $OUTPUT_PATH_RESPEC"
            echo "OWL_CORE_PATH is $OWL_CORE_PATH"
            echo "OWL_RESTR_PATH is $OWL_RESTR_PATH"
            echo "SHACL_SHAPES_PATH is $SHACL_SHAPES_PATH"
            echo "JSONLD_CONTEXT_PATH is $JSONLD_CONTEXT_PATH"

            mkdir -p $OUTPUT_PATH_RESPEC
            cd model2owl
            ls -la
            echo "+++++++++++++++++prepare namespaces for ReSpec generation++++++++++++++++++++++++++++"
            # Generate enriched namespaces first (required for ReSpec generation)
            make gen-enriched-ns-file \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            echo "+++++++++++++++++generate ReSpec JSON data++++++++++++++++++++++++++++"
            # First generate the ReSpec JSON data file
            make respec-json \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              OUTPUT_FOLDER_PATH=../$OUTPUT_PATH_RESPEC \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            
            echo "+++++++++++++++++prepare ReSpec resources++++++++++++++++++++++++++++"
            # Step 1: Copy base templates and js from Model2OWL (if they exist)
            if [ -d "respec-resources/templates" ]; then
              echo "Using Model2OWL base templates (appendix.j2, base.j2)"
              # Keep Model2OWL's appendix.j2 and base.j2 if they exist
            else
              echo "No Model2OWL templates found, creating directory"
              mkdir -p respec-resources/templates
            fi
            
            # Step 2: Copy all custom templates from repository (except base.j2)
            echo "Copying all custom templates from repository..."
            if [ -d "../implementation/${implementation}/respec-resources/templates" ]; then
              for template_file in "../implementation/${implementation}/respec-resources/templates"/*.j2; do
                if [ -f "$template_file" ]; then
                  template_name=$(basename "$template_file")
                  if [ "$template_name" != "base.j2" ]; then
                    echo "Copying template: $template_name"
                    cp -f "$template_file" "respec-resources/templates/"
                  else
                    echo "Skipping base.j2 (keeping Model2OWL version)"
                  fi
                fi
              done
            else
              echo "No custom templates directory found"
            fi
            
            # Step 5: Override assets completely with your version
            echo "Overriding assets with repository version..."
            rm -rf respec-resources/assets
            cp -rf "../implementation/${implementation}/respec-resources/assets" respec-resources/
            
            # Step 6: Keep Model2OWL's js folder (do not override)
            echo "Using Model2OWL's js folder and scripts"
            
            echo "ReSpec resources prepared - using  templates and assets"
            
            echo "+++++++++++++++++generate ReSpec documentation++++++++++++++++++++++++++++"
            # Then generate the complete ReSpec documentation
            make generate-respec \
              XMI_INPUT_FILE_PATH=../$CM_FILE_PATH \
              RESPEC_OUTPUT_DIR=../$OUTPUT_PATH_RESPEC \
              OUTPUT_FOLDER_PATH=../$OUTPUT_PATH_RESPEC \
              RESPEC_INPUT_ASSETS_DIR=${RESPEC_ASSETS_PATH} \
              RESPEC_DATA_JSON_PATH=../$OUTPUT_PATH_RESPEC/${implementation}_CM_respec.json \
              RESPEC_METADATA_JSON_PATH=${METADATA_JSON_PATH} \
              OWL_CORE_FILE_PATH=../$OWL_CORE_PATH \
              OWL_RESTR_FILE_PATH=../$OWL_RESTR_PATH \
              SHACL_SHAPES_FILE_PATH=../$SHACL_SHAPES_PATH \
              JSONLD_CONTEXT_FILE_PATH=../$JSONLD_CONTEXT_PATH \
              NAMESPACES_USER_XML_FILE_PATH=${NS_XML_FILE_PATH}
            echo "-------------------end ReSpec generation---------------------------------"

            sed -i "s/..\/implementation\/${implementation}\/model2owl-config/test\/ePO-default-config/g" config-proxy.xsl
            cd ..
          done
        shell: bash

      - name: remove unnecessary files
        run: |
          sudo rm -rf model2owl
        shell: bash

      - name: commit files
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          git pull
          git status

          git add .
          if [ -z "$(git status --porcelain)" ]; then
          echo "::set-output name=push::false"
          else
          git commit -m "Adding ReSpec documentation files"
          echo "::set-output name=push::true"
          fi
        shell: bash

      - name: Push changes
        if: steps.commit.outputs.push == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  publish_to_pages:
    needs: generate_respec
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Prepare ReSpec documentation for Pages
        run: |
          # Define available implementations
          AVAILABLE_IMPLEMENTATIONS=(demo_ontology demo_ontology_module)
          
          # Create a temporary directory for Pages content
          mkdir -p _site
          
          # Track found implementations
          FOUND_IMPLEMENTATIONS=()
          
          # Copy ReSpec documentation for each implementation
          for implementation in "${AVAILABLE_IMPLEMENTATIONS[@]}"
          do
            if [ -d "implementation/$implementation/respec" ]; then
              echo "Found ReSpec documentation for $implementation, copying to _site..."
              mkdir -p "_site/$implementation"
              cp -r "implementation/$implementation/respec/"* "_site/$implementation/"
              FOUND_IMPLEMENTATIONS+=("$implementation")
            else
              echo "No ReSpec documentation found for $implementation"
            fi
          done
          
          # Create dynamic landing page
          echo "Creating dynamic landing page..."
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Ontology Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      margin: 0;
                      padding: 40px;
                      background-color: #f8f9fa;
                      line-height: 1.6;
                  }
                  .container {
                      max-width: 1000px;
                      margin: 0 auto;
                      background: white;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      padding: 40px;
                  }
                  h1 {
                      color: #2c3e50;
                      text-align: center;
                      margin-bottom: 40px;
                      font-size: 2.5em;
                  }
                  .implementations-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 20px;
                      margin-top: 30px;
                  }
                  .card {
                      border: 1px solid #e1e8ed;
                      padding: 25px;
                      border-radius: 8px;
                      background: #fff;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .card:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                  }
                  .card h2 {
                      color: #34495e;
                      margin-top: 0;
                      font-size: 1.4em;
                  }
                  .card p {
                      color: #7f8c8d;
                      margin-bottom: 20px;
                  }
                  a {
                      color: #3498db;
                      text-decoration: none;
                      font-weight: 500;
                      display: inline-block;
                      padding: 10px 20px;
                      background: #ecf0f1;
                      border-radius: 5px;
                      transition: background-color 0.2s;
                  }
                  a:hover {
                      background: #3498db;
                      color: white;
                  }
                  .no-docs {
                      text-align: center;
                      color: #95a5a6;
                      font-style: italic;
                      padding: 40px;
                  }
                  .implementation-name {
                      text-transform: capitalize;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Ontology Documentation</h1>
          EOF
          
          # Add cards for each found implementation
          if [ ${#FOUND_IMPLEMENTATIONS[@]} -gt 0 ]; then
            echo '        <div class="implementations-grid">' >> _site/index.html
            for implementation in "${FOUND_IMPLEMENTATIONS[@]}"
            do
              readable_name=$(echo "$implementation" | sed 's/_/ /g' | sed 's/\b\w/\U&/g')
              cat >> _site/index.html << EOF
              <div class="card">
                  <h2 class="implementation-name">$readable_name</h2>
                  <p>Complete ReSpec documentation including semantic artifacts (OWL, SHACL, JSON-LD context files).</p>
                  <a href="./$implementation/">View Documentation →</a>
              </div>
          EOF
            done
            echo '        </div>' >> _site/index.html
          else
            cat >> _site/index.html << 'EOF'
              <div class="no-docs">
                  <h2>Documentation Not Available</h2>
                  <p>No ReSpec documentation has been generated yet.</p>
                  <p>Please run the transformation workflow first to generate the documentation.</p>
              </div>
          EOF
          fi
          
          # Close HTML
          cat >> _site/index.html << 'EOF'
              </div>
          </body>
          </html>
          EOF
          
          # List what we're about to publish
          echo "Content prepared for GitHub Pages:"
          echo "Found implementations: ${FOUND_IMPLEMENTATIONS[*]}"
          find _site -type f -name "*.html" | head -10
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3